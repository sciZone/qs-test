{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
\margl1440\margr1440\vieww25140\viewh24860\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 #!/usr/bin/env python3\
"""\
Making a basic test case that accepts the test case as a parameter\
"""\
\
import syslog\
import subprocess\
import time\
import traceback\
import sys\
import os\
import errno\
import requests\
import json\
\
import codecs\
import shlex\
import getpass\
import datetime\
import logging\
import argparse\
import configparser\
import certifi\
import importlib\
\
# Fernet is a system for symmetric encryption/decryption\
\
from cryptography.fernet import Fernet\
\
import jira_rest_api\
import synapsert\
\
#\
#\
# function get_fernet:  This function gets the "key" from the key file to decipher the encrypted password\
#\
#           key_file = the filename storing the key for the file to be decrypted\
\
def get_fernet(key_file):\
    with open(f"config/."+key_file, "rb") as f:\
        cipher = Fernet(f.read())\
\
    return cipher\
\
\
#\
#\
# function parse_args:  This function allows the "config" information and the current QuickSAT information\
#                       to be loaded into the QuickSAT Environment\
#\
#\
\
def parse_args():\
    parser = argparse.ArgumentParser(description='Load QuickSAT Data.')\
    parser.add_argument('--config',\
                        help='Configuration to use.',\
                        default='qs_default')\
\
\
    return parser.parse_args()\
\
def init_logging():\
    timestamp = datetime.datetime.now().strftime("Run_%Y_%m_%d_%H_%M_%S")\
    #logging.basicConfig(filename='log/'+timestamp, encoding='utf-8', level=logging.DEBUG)\
    #logging.debug('Begin logging')\
    logger = logging.getLogger(__name__)\
    logger.setLevel(logging.DEBUG)\
    fh = logging.FileHandler('log/'+timestamp)\
    formatter = logging.Formatter('%(asctime)s [%(levelname)s]: %(message)s')\
    fh.setLevel(logging.DEBUG)\
    fh.setFormatter(formatter)\
    ch = logging.StreamHandler()\
    ch.setLevel(logging.INFO)\
    ch.setFormatter(formatter)\
    logger.addHandler(fh)\
    logger.addHandler(ch)\
    logger.info('Begin logging')\
    return logger\
\
class qs_test_config():\
    def __init__(self, config):\
        self.auth_url = config.ENV_CONFIG.get('AUTH_URL', None)\
        self.qs_url = config.ENV_CONFIG.get('QS_URL', None)\
        self.jira_url = config.ENV_CONFIG.get('JIRA_URL', None)\
        self.jira_user = config.ENV_CONFIG.get('JIRA_USER', None)\
        self.cert_file = config.ENV_CONFIG.get('CERT_FILE', None)\
        self.qt_synapsert = config.ENV_CONFIG.get('QT_SYNAPSERT', False)\
        self.qt_log = config.ENV_CONFIG.get('QT_LOG', False)\
        self.qt_log_append = config.ENV_CONFIG.get('QT_LOG_APPEND', False)\
        self.qs_user = config.ENV_CONFIG.get('QS_USER', None)\
\
        qspass_file = config.ENV_CONFIG.get('QS_PASSSFILE', None)\
        self.qs_pass_file = ""\
        if qspass_file == None:\
            self.qs_pass_file = f"config/.qsjirapassfile"\
        else:\
            self.qs_pass_file = qspass_file\
\
#\
#    Exception Class for qs_test class of functions\
#\
class QSTError(Exception):\
    pass\
\
def init_config():\
            #\
	#  Get Configuration information\
        #\
	args = parse_args()              # Define args\
\
        #  Read the configuration information specific to the QuickSAT Environment\
        sys.path.append("config")\
        #config = __import__(f'config.\{args.config\}', fromlist=['ENV_CONFIG', 'DATABASE_CONFIG'])\
        config = importlib.import_module(args.config)\
\
        result = qs_test_config(config)\
        #result = (auth_url, qs_url, jira_url, jira_user, cert_file, qt_synapsert, qt_log, qt_log_append, qs_user, qs_pass_file)\
        return result\
\
\
def __get_pass(qt_config):\
    # get the token\
    key_file = "qsjira_key"\
    __cipher = get_fernet(key_file)\
\
    # Extract the halo Password from the .qsjira_key\
    #    The password must also be decoded from "utf-8"\
    with open(qt_config.qs_pass_file, 'rb') as pf:\
        __qsjira_password = __cipher.decrypt(pf.read()).decode()\
        logging.getLogger(__name__).info("User Password found and extracted")\
        return __qsjira_password\
\
def get_token(qt_config):\
        if qt_config.auth_url == None:\
            raise QSTError('Authentication URL not defined.')\
\
        if qt_config.jira_user == None:\
            raise QSTError('Jira User not defined.')\
\
        if not os.path.exists(qt_config.qs_pass_file):\
            raise QSTError('Jira Password file is missing.')\
        else:\
            qsjira_password = __get_pass(qt_config)\
\
        return (qt_config.jira_user, qsjira_password )    # Name mangling qsjira_password - treated as private\
\
def main_loop():\
    logger = init_logging()\
    qt_config = init_config()\
    auth = get_token(qt_config)\
    jira = jira_rest_api.jira_rest()\
\
    # attempt to get the list of cycles in the VSMFSW-2267 test plan\
    try:\
        url = qt_config.jira_url + '/rest/synapse/latest/public/testPlan/' + 'VSMFSW-2267' + '/cycles'\
        logger.debug("GET url_api='" + str(url) + "', authorization=auth, verifyFile='" + str(qt_config.cert_file) + "'")\
        response = jira.api_request_get(url_api=url, authorization=auth, verifyFile=qt_config.cert_file)\
        response.raise_for_status()  # raises exception when not a 2xx response\
        respj = response.json()\
        for thecycles in respj:\
            print(thecycles)\
        if response.status_code != 204:\
            logger.info(response)\
    except Exception as e:\
        logger.error(e)\
\
    #attempt to add 'test2' as a cycle in the VSMFSW-2267 test plan\
    try:\
        url = qt_config.jira_url + '/rest/synapse/latest/public/testPlan/' + 'VSMFSW-2267' + '/addCycle'\
        logger.debug("POST url_api='" + str(url) + "', authorization=auth, verifyFile='" + str(qt_config.cert_file) + "'")\
        json_data = \{"name":"test2","environment":"Firefox","build":"build 1.0","plannedStartDate":"2022-01-22","plannedEndDate":"2022-01-23"\}\
        response = jira.api_request_post(url_api=url, data_api=json_data, authorization=auth, verifyFile=qt_config.cert_file)\
        if response.status_code != 204:\
            logger.info(response)\
    except Exception as e:\
        logger.error(e)\
\
\
if __name__ == '__main__':\
\
    main_loop()\
\
\
\
\
\
}